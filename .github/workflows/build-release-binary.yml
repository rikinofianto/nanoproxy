name: build-release-binary
run-name: Create Github Release for Golang Binary

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: master
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1.21.0'
      - run: |
          go version
          go mod tidy
          go build -o nanoproxy -ldflags "-X main.Version=${GITHUB_REF_NAME} -X main.Commit=${github.sha}" proxy.go
      - run: git version
      - run: git branch
      - run: git tag

      - name: Get semantic tag version and release notes from commit messages
        id: tag
        run: |
          curtag=${GITHUB_REF_NAME}
          major_minor=$(echo "$curtag" | cut -d'.' -f1-2)
          patch=$(echo "$curtag" | cut -d'.' -f3)
          # avoid empty patch number
          [ -n "$patch" ] && ((patch--)) || patch=".x"
          prevtag="${major_minor}.${patch}"
          
          echo "" > body.log
          if git tag | grep $prevtag ; then
            git log -q ${curtag}...${prevtag} --pretty="- %s" -q --no-color >> body.log
          else
            git log --pretty="- %s" -q --no-color >> body.log
          fi
          
          line_count=$(cat body.log | wc -l)
          
          echo "curtag=$curtag" >> $GITHUB_OUTPUT
          echo "prevtag=$prevtag" >> $GITHUB_OUTPUT
          echo "line_count=$line_count" >> $GITHUB_OUTPUT

      - run: echo curtag is ${{ steps.tag.outputs.curtag }}
      - run: echo prevtag is ${{ steps.tag.outputs.prevtag }}
      - run: echo line_count is ${{ steps.tag.outputs.line_count }}
      - run: cat body.log

      # Create Github Release with release notes from file and binary asset attached
      - uses: ncipollo/release-action@v1
        with:
          name: ${{ env.GITHUB_REF_NAME }}
          tag: ${{ env.GITHUB_REF_NAME }}
          artifacts: "nanoproxy"
          bodyFile: "body.log"
          token: ${{ secrets.GITHUB_TOKEN }}